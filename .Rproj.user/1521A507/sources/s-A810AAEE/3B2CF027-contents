library(ggplot2)
library(latex2exp)

#We'll use dbeta 8,3 as a good example of a skewed distribution of x

xfx <- function (x){
  dbeta(x,8,3)*x  
}

positive <- ggplot(data.frame(x = c(0, 1)), aes(x = x))+stat_function(fun=xfx,color="skyblue")+geom_vline(xintercept = 0.8,lty=2,size=0.5)+theme_minimal()+theme(
  axis.text.y=element_blank(),
  axis.ticks.y=element_blank()
)+ylab(TeX("$xf(x)$"))
# if you want to plot the original dbeta use this
#+stat_function(fun=dbeta,args = list(shape1 = 8,shape2 = 3))
positive

png("positive.png",width=2000,height=1195,res=300)
par(mfrow=c(1,1))
positive
dev.off()

#now, if you want to add shading, first define a function that gives the same result up to your threshold and 0 otherwise, then plot it using stat_function

xfxshade <- function (x){
  ifelse((x <= 0.8),dbeta(x,8,3)*x,0) 
}


ggplot(data.frame(x = c(0, 1)), aes(x = x))+stat_function(fun=xfx,color="skyblue")+stat_function(fun=xfxshade,fill="skyblue",geom="area",alpha=0.3)+
  geom_vline(xintercept = 0.8,lty=2,size=0.5)+theme_minimal()+theme(
  axis.text.y=element_blank(),
  axis.ticks.y=element_blank()
)+ylab(TeX("$xf(x)$"))





#Here are key elements for the 1-x  one
nxfx <- function(x){
  dbeta(x,8,3)*(1-x)
}

ggplot(data.frame(x = c(0, 1)), aes(x = x))+stat_function(fun=dbeta,args = list(shape1 = 8,shape2 = 3))+stat_function(fun=nxfx,color="skyblue")

